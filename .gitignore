# This file is used for Git repositories to specify intentionally untracked files that Git should ignore. 
# If you are not using git, you can delete this file. For more information see: https://git-scm.com/docs/gitignore
# For useful gitignore templates see: https://github.com/github/gitignore

# Salesforce and Copado Cache
.sf/*
.sfdx/*
.husky/*
.vscode/*
.copado/*
.localdevserver/
deploy-options.json

# LWC VSCode autocomplete
**/lwc/jsconfig.json

# VSCode Settings
settings.json

# LWC Jest coverage reports
coverage/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependency directories
node_modules/

# Eslint cache
.eslintcache

# MacOS system files
.DS_Store

# Windows system files
Thumbs.db
ehthumbs.db
[Dd]esktop.ini
$RECYCLE.BIN/

# Local environment variables
.env

# Python Salesforce Functions
**/__pycache__/
**/.venv/
**/venv/

.copado

#package.xml file is recreated on the fly by Copado, no need to track unnecessary changes of this file
package.xml

#Managed packages can trigger the installation or uninstallation of applications, it is 
#recommended to manage this outside git

installedPackages/*
*Field_Trip__*
*permissioner__*
*qualtrics__*
*sf_chttr_apps__*
*sf_com_apps__*
*sfadminapps__*
*sites_reporting__*
*trailheadapp__*

#if you are not customizing a managed package, you can keep your repository clean by ignoring
#all files for that package. For example, to ignore all files of the "Copado" managed package
#just add to your gitignore file the following text: *copado__*
#if you will be customizing managed packages, make sure that the same version of the package
#is installed on all your environments so that deployments will only update existing
#managed components. Creation of managed components is not permitted by the API.
#It is recommended that you ignore managed components that cannot be modified
#since there is no need to track them in Git, like for example:

# Copado Deployer Base Package
copado__*. 
classes/copado__*
triggers/copado__*
pages/copado__*

# Copado Quality Integration Framework
copadoQuality__*. 
classes/copadoQuality__*
triggers/copadoQuality__*
pages/copadoQuality__*

#Copado DX 
cmcSf__*.
classes/cmcSf*
triggers/cmcSf*
pages/cmcSf*

#Translations are complex since get updated indirectly across multiple files, they can make a deployment fail
#if a field is translated in source and it doesn't exist on destination.
#If you are committing incrementally new fields and new Translations you can track them in Git, just be careful.
#If you choose  to ignore them in Git, you can always create a deployment with the Copado Deployer "Translation" Step.

# translations/*
# objectTranslations/*

# Sites which has Domain mapping has environment specific information.
# Make sure you setup Copado Environment Variables to make sites config files environment agnostic.
#Until the above is achieved, you can ignore them as follows
# sites/*
# siteDotComSites/*

# Documents are mostly created in Production and are not deployed between Sandboxes. You can safely ignore them in Git.
documents/*
reports/*
dashboards/*
flowdefinitions/*
staticresources/*
authprovider/*
samlssoconfigs/*

